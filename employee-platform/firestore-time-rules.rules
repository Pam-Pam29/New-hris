rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check user role
    function hasRole(role) {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Helper function to check if user is owner
    function isOwner(employeeId) {
      return isAuthenticated() && request.auth.uid == employeeId;
    }
    
    // Time Entries - Employees can create/read own, HR can read all
    match /timeEntries/{entryId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                      request.resource.data.employeeId == request.auth.uid;
      allow update: if isAuthenticated() && 
                      (resource.data.employeeId == request.auth.uid || 
                       hasRole('hr') || 
                       hasRole('admin'));
      allow delete: if hasRole('hr') || hasRole('admin');
    }
    
    // Time Adjustment Requests - Employees create, HR approves
    match /timeAdjustmentRequests/{requestId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                      request.resource.data.employeeId == request.auth.uid &&
                      request.resource.data.status == 'pending';
      allow update: if hasRole('hr') || hasRole('admin');
      allow delete: if hasRole('hr') || hasRole('admin');
    }
    
    // Time Notifications - Read by recipients
    match /timeNotifications/{notifId} {
      allow read: if isAuthenticated() &&
                    (resource.data.employeeId == request.auth.uid ||
                     resource.data.sentToHr == true);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() &&
                      (resource.data.employeeId == request.auth.uid ||
                       hasRole('hr') ||
                       hasRole('admin'));
      allow delete: if hasRole('hr') || hasRole('admin');
    }
    
    // Schedules - HR manages, employees read own
    match /schedules/{scheduleId} {
      allow read: if isAuthenticated();
      allow create: if hasRole('hr') || hasRole('admin');
      allow update: if hasRole('hr') || hasRole('admin');
      allow delete: if hasRole('hr') || hasRole('admin');
    }
  }
}



